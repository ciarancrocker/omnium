const db = require('../lib/database');
const winston = require('winston');

/**
 * Get the modal element in an array
 *
 * @param {*[]} arr -  Array to find mode of
 * @return {*} Modal element
 */
function mode(arr) {
  return arr.sort((a, b) =>
    arr.filter((v) => v===a).length
    - arr.filter((v) => v===b).length
  ).pop();
}

/**
 * Update the name of a channel based on it's members presence
 *
 * @param {Channel} channel - The channel to be updated
 */
async function updateChannel(channel) {
  // see if this is a channel we're managing
  const channelQuery = await db.pool.query(
    'SELECT * FROM channels WHERE discord_id = $1',
    [channel.id]
  );
  if (channelQuery.rowCount > 0) { // yes, we are managing it
    const channelMembers = channel.members.array();
    let channelName = channelQuery.rows[0].name;
    if (channelMembers.length > 0) {
      const presences = channelMembers.map((m) => m.presence.game)
        .filter((x) => x).map((p) => p.name);
      if (presences.length > 0) {
        const modalGame = mode(presences);
        channelName = `${channelName} (${modalGame})`;
      }
    }
    if (channelName == channel.name) {
      winston.log('debug', 'Skipping update for "%s" (no change in name)',
        channel.name);
    } else {
      setChannelName(channel, channelName);
    }
  }
}

/**
 * Wrapper function to set a channel's name
 *
 * @param {Channel} channel - Channel whose name should be changed
 * @param {string} newName - New name for specified channel
 * @return {Promise} Promise for setting the name
 */
function setChannelName(channel, newName) {
  const oldName = channel.name;
  return channel.setName(newName).then(() => {
    winston.log('info', 'Channel changed from "%s" to "%s"', oldName, newName);
  }).catch((err) => {
    winston.log('error', 'Error changing channel name for channel "%s" (%d)',
      oldName, channel.id);
  });
}

/**
 * Handle the voice state update generated by Discord.js
 *
 * @param {GuildMember} before - Member before the update
 * @param {GuildMember} after - Member after the update
 */
function handleVoiceStateUpdate(before, after) {
  if (before.voiceChannelID != null) {
    updateChannel(
      before.guild.channels.find((ch) => ch.id == before.voiceChannelID)
    );
  }
  if (after.voiceChannelID != null) {
    updateChannel(
      after.guild.channels.find((ch) => ch.id == after.voiceChannelID)
    );
  }
}

module.exports.handleVoiceStateUpdate = handleVoiceStateUpdate;
